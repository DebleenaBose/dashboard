import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Chart } from '@syncfusion/ej2-charts';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Chart Component
 * ```html
 * <ejschart></ejschart>
 * ```
 */
export declare class ChartComponent extends Chart implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    childSeries: any;
    childAxes: any;
    childRows: any;
    childColumns: any;
    childAnnotations: any;
    childSelectedDataIndexes: any;
    childIndicators: any;
    tags: string[];
    dataSourceChange: any;
    tooltip_template: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChartComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChartComponent, "ejs-chart", never, {
    "allowMultiSelection": "allowMultiSelection";
    "annotations": "annotations";
    "axes": "axes";
    "background": "background";
    "backgroundImage": "backgroundImage";
    "border": "border";
    "chartArea": "chartArea";
    "columns": "columns";
    "crosshair": "crosshair";
    "currencyCode": "currencyCode";
    "dataSource": "dataSource";
    "description": "description";
    "enableAnimation": "enableAnimation";
    "enableCanvas": "enableCanvas";
    "enableExport": "enableExport";
    "enablePersistence": "enablePersistence";
    "enableRtl": "enableRtl";
    "enableSideBySidePlacement": "enableSideBySidePlacement";
    "height": "height";
    "indicators": "indicators";
    "isMultiSelect": "isMultiSelect";
    "isTransposed": "isTransposed";
    "legendSettings": "legendSettings";
    "locale": "locale";
    "margin": "margin";
    "palettes": "palettes";
    "primaryXAxis": "primaryXAxis";
    "primaryYAxis": "primaryYAxis";
    "rows": "rows";
    "selectedDataIndexes": "selectedDataIndexes";
    "selectionMode": "selectionMode";
    "series": "series";
    "subTitle": "subTitle";
    "subTitleStyle": "subTitleStyle";
    "tabIndex": "tabIndex";
    "theme": "theme";
    "title": "title";
    "titleStyle": "titleStyle";
    "tooltip": "tooltip";
    "useGroupingSeparator": "useGroupingSeparator";
    "width": "width";
    "zoomSettings": "zoomSettings";
}, {
    "afterExport": "afterExport";
    "animationComplete": "animationComplete";
    "annotationRender": "annotationRender";
    "axisLabelRender": "axisLabelRender";
    "axisMultiLabelRender": "axisMultiLabelRender";
    "axisRangeCalculated": "axisRangeCalculated";
    "beforeExport": "beforeExport";
    "beforePrint": "beforePrint";
    "chartMouseClick": "chartMouseClick";
    "chartMouseDown": "chartMouseDown";
    "chartMouseLeave": "chartMouseLeave";
    "chartMouseMove": "chartMouseMove";
    "chartMouseUp": "chartMouseUp";
    "drag": "drag";
    "dragComplete": "dragComplete";
    "dragEnd": "dragEnd";
    "dragStart": "dragStart";
    "legendClick": "legendClick";
    "legendRender": "legendRender";
    "load": "load";
    "loaded": "loaded";
    "multiLevelLabelClick": "multiLevelLabelClick";
    "onZooming": "onZooming";
    "pointClick": "pointClick";
    "pointMove": "pointMove";
    "pointRender": "pointRender";
    "resized": "resized";
    "scrollChanged": "scrollChanged";
    "scrollEnd": "scrollEnd";
    "scrollStart": "scrollStart";
    "selectionComplete": "selectionComplete";
    "seriesRender": "seriesRender";
    "textRender": "textRender";
    "tooltipRender": "tooltipRender";
    "zoomComplete": "zoomComplete";
    "dataSourceChange": "dataSourceChange";
}, ["tooltip_template", "childSeries", "childAxes", "childRows", "childColumns", "childAnnotations", "childSelectedDataIndexes", "childIndicators"]>;
}

//# sourceMappingURL=chart.component.d.ts.map
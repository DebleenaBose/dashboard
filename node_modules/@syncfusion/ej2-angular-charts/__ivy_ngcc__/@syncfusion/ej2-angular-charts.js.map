{"version":3,"sources":["/home/debleena/Projects/dashboard (1)/node_modules/@syncfusion/ej2-angular-charts/@syncfusion/ej2-angular-charts.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBC,6gBAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BD,2NAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoCD,qkDAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BD,mtBAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BD,0SAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD,uLAUC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyBD,6uDAWC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,2LAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,kMAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCD,+TAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,mOAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,6jCAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAicA,23EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD,wJA2DC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiED,uBAiEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCD,i4BAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCD,+QAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+HA,6iDAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD,4LAmBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkBD,mCAkBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,uZAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiHA,gjDAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD,mLAeC;;;;;;;;;;;;;;;;;;CAYD,gCAYC;;;;;;;;;;;;;;;;;;;;CAkBD,kRAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuEA,q9CAYA;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,oKAeC;;;;;;;;;;;;;;;;CAWD,2BAWC;;;;;;;;;;;;;;;;;;;;CAkBD,sgBAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8EA,k4BAYA;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,uKAeC;;;;;;;;;;;;;;;;;;CAYD,4BAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BD,iiBAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BD,24BAUC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BD,0yBAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyBD,68CAUC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,0NAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCD,+TAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,kQAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,uRAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,mXAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,s+BAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2QA,8rDAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD,uKAmDC;;;;;;;;;;;;;CAUD,4BASC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,gOAQC;;;;;;;;;;;;;;;;;;;;;CAcD,yDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuEA,+8CAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAuBuB;;;;;;;;CAMxB,0KAeC;;;;;;;;;;;;;;;;;;;;;;;;;0BAI0C;;;;;;;;;;;;CAO3C,6BAWC;;;;;;;;;;;;;;;;;;0BAI6C","file":"ej2-angular-charts.js","sourcesContent":["import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';\nimport { ArrayBase, ComplexBase, ComponentBase, ComponentMixins, Template, setValue } from '@syncfusion/ej2-angular-base';\nimport { AccumulationAnnotation, AccumulationChart, AccumulationDataLabel, AccumulationDistributionIndicator, AccumulationLegend, AccumulationSelection, AccumulationTooltip, AreaSeries, AtrIndicator, BarSeries, BollingerBands, BoxAndWhiskerSeries, BubbleSeries, BulletChart, BulletTooltip, CandleSeries, Category, Chart, ChartAnnotation, ColumnSeries, Crosshair, DataEditing, DataLabel, DateTime, DateTimeCategory, EmaIndicator, ErrorBar, Export, FunnelSeries, HiloOpenCloseSeries, HiloSeries, HistogramSeries, Legend, LineSeries, Logarithmic, MacdIndicator, MomentumIndicator, MultiColoredAreaSeries, MultiColoredLineSeries, MultiLevelLabel, ParetoSeries, PeriodSelector, PieSeries, PolarSeries, PyramidSeries, RadarSeries, RangeAreaSeries, RangeColumnSeries, RangeNavigator, RangeTooltip, RsiIndicator, ScatterSeries, ScrollBar, Selection, SmaIndicator, Smithchart, SmithchartLegend, Sparkline, SparklineTooltip, SplineAreaSeries, SplineSeries, StackingAreaSeries, StackingBarSeries, StackingColumnSeries, StackingLineSeries, StepAreaSeries, StepLineSeries, StochasticIndicator, StockChart, StripLine, TmaIndicator, Tooltip, TooltipRender, Trendlines, WaterfallSeries, Zoom } from '@syncfusion/ej2-charts';\nimport { CommonModule } from '@angular/common';\n\nlet input = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet outputs = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-trendlines>\n * <e-trendline>\n * </e-trendline>\n * </e-trendlines>\n * </e-series-collection>\n * ```\n */\nclass TrendlineDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\n}\nTrendlineDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-series>e-trendlines>e-trendline',\n                inputs: input,\n                outputs: outputs,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nTrendlineDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * Trendline Array Directive\n */\nclass TrendlinesDirective extends ArrayBase {\n    constructor() {\n        super('trendlines');\n    }\n}\nTrendlinesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-series>e-trendlines',\n                queries: {\n                    children: new ContentChildren(TrendlineDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nTrendlinesDirective.ctorParameters = () => [];\n\nlet input$1 = ['color', 'dashArray', 'value'];\nlet outputs$1 = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-segments>\n * <e-segment>\n * </e-segment>\n * </e-segments>\n * </e-series-collection>\n * ```\n */\nclass SegmentDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$1);\n    }\n}\nSegmentDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-series>e-segments>e-segment',\n                inputs: input$1,\n                outputs: outputs$1,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nSegmentDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * Segment Array Directive\n */\nclass SegmentsDirective extends ArrayBase {\n    constructor() {\n        super('segments');\n    }\n}\nSegmentsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-series>e-segments',\n                queries: {\n                    children: new ContentChildren(SegmentDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nSegmentsDirective.ctorParameters = () => [];\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input$2 = ['animation', 'bearFillColor', 'binInterval', 'border', 'boxPlotMode', 'bullFillColor', 'cardinalSplineTension', 'close', 'columnSpacing', 'columnWidth', 'connector', 'cornerRadius', 'dashArray', 'dataSource', 'dragSettings', 'drawType', 'emptyPointSettings', 'enableComplexProperty', 'enableSolidCandles', 'enableTooltip', 'errorBar', 'fill', 'high', 'intermediateSumIndexes', 'isClosed', 'legendShape', 'low', 'marker', 'maxRadius', 'minRadius', 'name', 'negativeFillColor', 'opacity', 'open', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'selectionStyle', 'showMean', 'showNormalDistribution', 'size', 'splineType', 'stackingGroup', 'sumIndexes', 'summaryFillColor', 'tooltipFormat', 'tooltipMappingName', 'trendlines', 'type', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName', 'zOrder'];\nlet outputs$2 = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series></e-series>\n * </e-series-collection>\n * ```\n */\nclass SeriesDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        this.tags = ['trendlines', 'segments'];\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$2);\n    }\n}\nSeriesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-series-collection>e-series',\n                inputs: input$2,\n                outputs: outputs$2,\n                queries: {\n                    childTrendlines: new ContentChild(TrendlinesDirective),\n                    childSegments: new ContentChild(SegmentsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nSeriesDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nSeriesDirective.propDecorators = {\n    'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate',] },],\n};\n__decorate([\n    Template(),\n    __metadata(\"design:type\", Object)\n], SeriesDirective.prototype, \"dataLabel_template\", void 0);\n/**\n * Series Array Directive\n */\nclass SeriesCollectionDirective extends ArrayBase {\n    constructor() {\n        super('series');\n    }\n}\nSeriesCollectionDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ej-chart>e-series-collection',\n                queries: {\n                    children: new ContentChildren(SeriesDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nSeriesCollectionDirective.ctorParameters = () => [];\n\nlet input$3 = ['border', 'color', 'dashArray', 'end', 'horizontalAlignment', 'isRepeat', 'isSegmented', 'opacity', 'repeatEvery', 'repeatUntil', 'rotation', 'segmentAxisName', 'segmentEnd', 'segmentStart', 'size', 'sizeType', 'start', 'startFromAxis', 'text', 'textStyle', 'verticalAlignment', 'visible', 'zIndex'];\nlet outputs$3 = [];\n/**\n * StripLine Directive\n * ```html\n * <e-axis>\n * <e-striplines>\n * <e-stripline></e-stripline>\n * </e-striplines>\n * </e-axis>\n * ```\n */\nclass StripLineDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$3);\n    }\n}\nStripLineDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-axis>e-striplines>e-stripline',\n                inputs: input$3,\n                outputs: outputs$3,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStripLineDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StripLine Array Directive\n */\nclass StripLinesDirective extends ArrayBase {\n    constructor() {\n        super('striplines');\n    }\n}\nStripLinesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-axis>e-striplines',\n                queries: {\n                    children: new ContentChildren(StripLineDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStripLinesDirective.ctorParameters = () => [];\n\nlet input$4 = ['customAttributes', 'end', 'maximumTextWidth', 'start', 'text', 'type'];\nlet outputs$4 = [];\n/**\n * MultiLevelLabels Directive\n * ```html\n * <e-multilevellabels>\n * <e-multilevellabel>\n * <e-Categories>\n * <e-Category>\n * </e-Category>\n * </e-Categories>\n * </e-multilevellabel>\n * </e-multilevellabels>\n * ```\n */\nclass CategoryDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$4);\n    }\n}\nCategoryDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-multilevellabel>e-categories>e-category',\n                inputs: input$4,\n                outputs: outputs$4,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nCategoryDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * Category Array Directive\n */\nclass CategoriesDirective extends ArrayBase {\n    constructor() {\n        super('categories');\n    }\n}\nCategoriesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-multilevellabel>e-categories',\n                queries: {\n                    children: new ContentChildren(CategoryDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nCategoriesDirective.ctorParameters = () => [];\n\nlet input$5 = ['alignment', 'border', 'categories', 'overflow', 'textStyle'];\nlet outputs$5 = [];\n/**\n * MultiLevelLabel Directive\n * ```html\n * <e-axis>\n * <e-multilevellabels>\n * <e-multilevellabel></e-multilevellabel>\n * </e-multilevellabels>\n * </e-axis>\n * ```\n */\nclass MultiLevelLabelDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        this.tags = ['categories'];\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$5);\n    }\n}\nMultiLevelLabelDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-axis>e-multilevellabels>e-multilevellabel',\n                inputs: input$5,\n                outputs: outputs$5,\n                queries: {\n                    childCategories: new ContentChild(CategoriesDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMultiLevelLabelDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * MultiLevelLabel Array Directive\n */\nclass MultiLevelLabelsDirective extends ArrayBase {\n    constructor() {\n        super('multilevellabels');\n    }\n}\nMultiLevelLabelsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-axis>e-multilevellabels',\n                queries: {\n                    children: new ContentChildren(MultiLevelLabelDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMultiLevelLabelsDirective.ctorParameters = () => [];\n\nlet input$6 = ['border', 'coefficient', 'columnIndex', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableTrim', 'interval', 'intervalType', 'isIndexed', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'multiLevelLabels', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'plotOffsetBottom', 'plotOffsetLeft', 'plotOffsetRight', 'plotOffsetTop', 'rangePadding', 'rowIndex', 'scrollbarSettings', 'skeleton', 'skeletonType', 'span', 'startAngle', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet outputs$6 = [];\n/**\n * Axis Directive\n * ```html\n * <e-axes><e-axis></e-axis></e-axes>\n * ```\n */\nclass AxisDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        this.tags = ['stripLines', 'multiLevelLabels'];\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$6);\n    }\n}\nAxisDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-axes>e-axis',\n                inputs: input$6,\n                outputs: outputs$6,\n                queries: {\n                    childStripLines: new ContentChild(StripLinesDirective),\n                    childMultiLevelLabels: new ContentChild(MultiLevelLabelsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nAxisDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * Axis Array Directive\n */\nclass AxesDirective extends ArrayBase {\n    constructor() {\n        super('axes');\n    }\n}\nAxesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-chart>e-axes',\n                queries: {\n                    children: new ContentChildren(AxisDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nAxesDirective.ctorParameters = () => [];\n\nlet input$7 = ['border', 'height'];\nlet outputs$7 = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nclass RowDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$7);\n    }\n}\nRowDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-rows>e-row',\n                inputs: input$7,\n                outputs: outputs$7,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nRowDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * Row Array Directive\n */\nclass RowsDirective extends ArrayBase {\n    constructor() {\n        super('rows');\n    }\n}\nRowsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-chart>e-rows',\n                queries: {\n                    children: new ContentChildren(RowDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nRowsDirective.ctorParameters = () => [];\n\nlet input$8 = ['border', 'width'];\nlet outputs$8 = [];\n/**\n * Column Directive\n * ```html\n * <e-columns><e-column></e-column><e-columns>\n * ```\n */\nclass ColumnDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$8);\n    }\n}\nColumnDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-columns>e-column',\n                inputs: input$8,\n                outputs: outputs$8,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nColumnDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * Column Array Directive\n */\nclass ColumnsDirective extends ArrayBase {\n    constructor() {\n        super('columns');\n    }\n}\nColumnsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-chart>e-columns',\n                queries: {\n                    children: new ContentChildren(ColumnDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nColumnsDirective.ctorParameters = () => [];\n\nvar __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$1 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input$9 = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet outputs$9 = [];\n/**\n * Annotation Directive\n * ```html\n * <e-annotations><e-annotation></e-annotation><e-annotations>\n * ```\n */\nclass AnnotationDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$9);\n    }\n}\nAnnotationDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-annotations>e-annotation',\n                inputs: input$9,\n                outputs: outputs$9,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nAnnotationDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nAnnotationDirective.propDecorators = {\n    'content': [{ type: ContentChild, args: ['content',] },],\n};\n__decorate$1([\n    Template(),\n    __metadata$1(\"design:type\", Object)\n], AnnotationDirective.prototype, \"content\", void 0);\n/**\n * Annotation Array Directive\n */\nclass AnnotationsDirective extends ArrayBase {\n    constructor() {\n        super('annotations');\n    }\n}\nAnnotationsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-chart>e-annotations',\n                queries: {\n                    children: new ContentChildren(AnnotationDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nAnnotationsDirective.ctorParameters = () => [];\n\nlet input$10 = ['point', 'series'];\nlet outputs$10 = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nclass SelectedDataIndexDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$10);\n    }\n}\nSelectedDataIndexDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-selecteddataindexes>e-selecteddataindex',\n                inputs: input$10,\n                outputs: outputs$10,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nSelectedDataIndexDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * SelectedDataIndex Array Directive\n */\nclass SelectedDataIndexesDirective extends ArrayBase {\n    constructor() {\n        super('selecteddataindexes');\n    }\n}\nSelectedDataIndexesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-chart>e-selecteddataindexes',\n                queries: {\n                    children: new ContentChildren(SelectedDataIndexDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nSelectedDataIndexesDirective.ctorParameters = () => [];\n\nlet input$11 = ['animation', 'bandColor', 'close', 'dPeriod', 'dashArray', 'dataSource', 'enableComplexProperty', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet outputs$11 = [];\n/**\n * Indicator Directive\n * ```html\n * <e-indicators>\n * <e-indicator></e-indicator>\n * </e-indicators>\n * ```\n */\nclass IndicatorDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$11);\n    }\n}\nIndicatorDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-indicators>e-indicator',\n                inputs: input$11,\n                outputs: outputs$11,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nIndicatorDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * Indicator Array Directive\n */\nclass IndicatorsDirective extends ArrayBase {\n    constructor() {\n        super('indicators');\n    }\n}\nIndicatorsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ej-chart>e-indicators',\n                queries: {\n                    children: new ContentChildren(IndicatorDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nIndicatorsDirective.ctorParameters = () => [];\n\nvar __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$2 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs = ['allowMultiSelection', 'annotations', 'axes', 'background', 'backgroundImage', 'border', 'chartArea', 'columns', 'crosshair', 'currencyCode', 'dataSource', 'description', 'enableAnimation', 'enableCanvas', 'enableExport', 'enablePersistence', 'enableRtl', 'enableSideBySidePlacement', 'height', 'indicators', 'isMultiSelect', 'isTransposed', 'legendSettings', 'locale', 'margin', 'palettes', 'primaryXAxis', 'primaryYAxis', 'rows', 'selectedDataIndexes', 'selectionMode', 'series', 'subTitle', 'subTitleStyle', 'tabIndex', 'theme', 'title', 'titleStyle', 'tooltip', 'useGroupingSeparator', 'width', 'zoomSettings'];\nconst outputs$12 = ['afterExport', 'animationComplete', 'annotationRender', 'axisLabelRender', 'axisMultiLabelRender', 'axisRangeCalculated', 'beforeExport', 'beforePrint', 'chartMouseClick', 'chartMouseDown', 'chartMouseLeave', 'chartMouseMove', 'chartMouseUp', 'drag', 'dragComplete', 'dragEnd', 'dragStart', 'legendClick', 'legendRender', 'load', 'loaded', 'multiLevelLabelClick', 'onZooming', 'pointClick', 'pointMove', 'pointRender', 'resized', 'scrollChanged', 'scrollEnd', 'scrollStart', 'selectionComplete', 'seriesRender', 'textRender', 'tooltipRender', 'zoomComplete', 'dataSourceChange'];\nconst twoWays = ['dataSource'];\n/**\n * Chart Component\n * ```html\n * <ejschart></ejschart>\n * ```\n */\nlet ChartComponent = class ChartComponent extends Chart {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['series', 'axes', 'rows', 'columns', 'annotations', 'selectedDataIndexes', 'indicators'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n            let mod = this.injector.get('ChartsLineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_a) { }\n        try {\n            let mod = this.injector.get('ChartsScatterSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_b) { }\n        try {\n            let mod = this.injector.get('ChartsColumnSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_c) { }\n        try {\n            let mod = this.injector.get('ChartsSplineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_d) { }\n        try {\n            let mod = this.injector.get('ChartsSplineAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_e) { }\n        try {\n            let mod = this.injector.get('ChartsStripLine');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_f) { }\n        try {\n            let mod = this.injector.get('ChartsAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_g) { }\n        try {\n            let mod = this.injector.get('ChartsScrollBar');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_h) { }\n        try {\n            let mod = this.injector.get('ChartsStepLineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_j) { }\n        try {\n            let mod = this.injector.get('ChartsStepAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_k) { }\n        try {\n            let mod = this.injector.get('ChartsStackingColumnSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_l) { }\n        try {\n            let mod = this.injector.get('ChartsStackingLineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_m) { }\n        try {\n            let mod = this.injector.get('ChartsStackingAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_o) { }\n        try {\n            let mod = this.injector.get('ChartsBarSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_p) { }\n        try {\n            let mod = this.injector.get('ChartsStackingBarSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_q) { }\n        try {\n            let mod = this.injector.get('ChartsRangeColumnSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_r) { }\n        try {\n            let mod = this.injector.get('ChartsBubbleSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_s) { }\n        try {\n            let mod = this.injector.get('ChartsTooltip');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_t) { }\n        try {\n            let mod = this.injector.get('ChartsCrosshair');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_u) { }\n        try {\n            let mod = this.injector.get('ChartsCategory');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_v) { }\n        try {\n            let mod = this.injector.get('ChartsDateTime');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_w) { }\n        try {\n            let mod = this.injector.get('ChartsLogarithmic');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_x) { }\n        try {\n            let mod = this.injector.get('ChartsLegend');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_y) { }\n        try {\n            let mod = this.injector.get('ChartsZoom');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_z) { }\n        try {\n            let mod = this.injector.get('ChartsDataLabel');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_0) { }\n        try {\n            let mod = this.injector.get('ChartsSelection');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_1) { }\n        try {\n            let mod = this.injector.get('ChartsChartAnnotation');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_2) { }\n        try {\n            let mod = this.injector.get('ChartsHiloSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_3) { }\n        try {\n            let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_4) { }\n        try {\n            let mod = this.injector.get('ChartsWaterfallSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_5) { }\n        try {\n            let mod = this.injector.get('ChartsRangeAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_6) { }\n        try {\n            let mod = this.injector.get('ChartsCandleSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_7) { }\n        try {\n            let mod = this.injector.get('ChartsPolarSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_8) { }\n        try {\n            let mod = this.injector.get('ChartsRadarSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_9) { }\n        try {\n            let mod = this.injector.get('ChartsSmaIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_10) { }\n        try {\n            let mod = this.injector.get('ChartsTmaIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_11) { }\n        try {\n            let mod = this.injector.get('ChartsEmaIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_12) { }\n        try {\n            let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_13) { }\n        try {\n            let mod = this.injector.get('ChartsMacdIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_14) { }\n        try {\n            let mod = this.injector.get('ChartsAtrIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_15) { }\n        try {\n            let mod = this.injector.get('ChartsRsiIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_16) { }\n        try {\n            let mod = this.injector.get('ChartsMomentumIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_17) { }\n        try {\n            let mod = this.injector.get('ChartsStochasticIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_18) { }\n        try {\n            let mod = this.injector.get('ChartsBollingerBands');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_19) { }\n        try {\n            let mod = this.injector.get('ChartsBoxAndWhiskerSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_20) { }\n        try {\n            let mod = this.injector.get('ChartsHistogramSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_21) { }\n        try {\n            let mod = this.injector.get('ChartsErrorBar');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_22) { }\n        try {\n            let mod = this.injector.get('ChartsTrendlines');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_23) { }\n        try {\n            let mod = this.injector.get('ChartsDateTimeCategory');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_24) { }\n        try {\n            let mod = this.injector.get('ChartsMultiColoredLineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_25) { }\n        try {\n            let mod = this.injector.get('ChartsMultiColoredAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_26) { }\n        try {\n            let mod = this.injector.get('ChartsMultiLevelLabel');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_27) { }\n        try {\n            let mod = this.injector.get('ChartsParetoSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_28) { }\n        try {\n            let mod = this.injector.get('ChartsExport');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_29) { }\n        try {\n            let mod = this.injector.get('ChartsDataEditing');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_30) { }\n        this.registerEvents(outputs$12);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n    }\n};\nChartComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-chart',\n                inputs: inputs,\n                outputs: outputs$12,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childSeries: new ContentChild(SeriesCollectionDirective),\n                    childAxes: new ContentChild(AxesDirective),\n                    childRows: new ContentChild(RowsDirective),\n                    childColumns: new ContentChild(ColumnsDirective),\n                    childAnnotations: new ContentChild(AnnotationsDirective),\n                    childSelectedDataIndexes: new ContentChild(SelectedDataIndexesDirective),\n                    childIndicators: new ContentChild(IndicatorsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nChartComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nChartComponent.propDecorators = {\n    'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate',] },],\n};\n__decorate$2([\n    Template(),\n    __metadata$2(\"design:type\", Object)\n], ChartComponent.prototype, \"tooltip_template\", void 0);\nChartComponent = __decorate$2([\n    ComponentMixins([ComponentBase]),\n    __metadata$2(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], ChartComponent);\n\n/**\n * NgModule definition for the Chart component.\n */\nclass ChartModule {\n}\nChartModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    ChartComponent,\n                    TrendlineDirective,\n                    TrendlinesDirective,\n                    SegmentDirective,\n                    SegmentsDirective,\n                    SeriesDirective,\n                    SeriesCollectionDirective,\n                    StripLineDirective,\n                    StripLinesDirective,\n                    CategoryDirective,\n                    CategoriesDirective,\n                    MultiLevelLabelDirective,\n                    MultiLevelLabelsDirective,\n                    AxisDirective,\n                    AxesDirective,\n                    RowDirective,\n                    RowsDirective,\n                    ColumnDirective,\n                    ColumnsDirective,\n                    AnnotationDirective,\n                    AnnotationsDirective,\n                    SelectedDataIndexDirective,\n                    SelectedDataIndexesDirective,\n                    IndicatorDirective,\n                    IndicatorsDirective\n                ],\n                exports: [\n                    ChartComponent,\n                    TrendlineDirective,\n                    TrendlinesDirective,\n                    SegmentDirective,\n                    SegmentsDirective,\n                    SeriesDirective,\n                    SeriesCollectionDirective,\n                    StripLineDirective,\n                    StripLinesDirective,\n                    CategoryDirective,\n                    CategoriesDirective,\n                    MultiLevelLabelDirective,\n                    MultiLevelLabelsDirective,\n                    AxisDirective,\n                    AxesDirective,\n                    RowDirective,\n                    RowsDirective,\n                    ColumnDirective,\n                    ColumnsDirective,\n                    AnnotationDirective,\n                    AnnotationsDirective,\n                    SelectedDataIndexDirective,\n                    SelectedDataIndexesDirective,\n                    IndicatorDirective,\n                    IndicatorsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nChartModule.ctorParameters = () => [];\n\nconst LineSeriesService = { provide: 'ChartsLineSeries', useValue: LineSeries };\nconst ScatterSeriesService = { provide: 'ChartsScatterSeries', useValue: ScatterSeries };\nconst ColumnSeriesService = { provide: 'ChartsColumnSeries', useValue: ColumnSeries };\nconst SplineSeriesService = { provide: 'ChartsSplineSeries', useValue: SplineSeries };\nconst SplineAreaSeriesService = { provide: 'ChartsSplineAreaSeries', useValue: SplineAreaSeries };\nconst StripLineService = { provide: 'ChartsStripLine', useValue: StripLine };\nconst AreaSeriesService = { provide: 'ChartsAreaSeries', useValue: AreaSeries };\nconst ScrollBarService = { provide: 'ChartsScrollBar', useValue: ScrollBar };\nconst StepLineSeriesService = { provide: 'ChartsStepLineSeries', useValue: StepLineSeries };\nconst StepAreaSeriesService = { provide: 'ChartsStepAreaSeries', useValue: StepAreaSeries };\nconst StackingColumnSeriesService = { provide: 'ChartsStackingColumnSeries', useValue: StackingColumnSeries };\nconst StackingLineSeriesService = { provide: 'ChartsStackingLineSeries', useValue: StackingLineSeries };\nconst StackingAreaSeriesService = { provide: 'ChartsStackingAreaSeries', useValue: StackingAreaSeries };\nconst BarSeriesService = { provide: 'ChartsBarSeries', useValue: BarSeries };\nconst StackingBarSeriesService = { provide: 'ChartsStackingBarSeries', useValue: StackingBarSeries };\nconst RangeColumnSeriesService = { provide: 'ChartsRangeColumnSeries', useValue: RangeColumnSeries };\nconst BubbleSeriesService = { provide: 'ChartsBubbleSeries', useValue: BubbleSeries };\nconst TooltipService = { provide: 'ChartsTooltip', useValue: Tooltip };\nconst CrosshairService = { provide: 'ChartsCrosshair', useValue: Crosshair };\nconst CategoryService = { provide: 'ChartsCategory', useValue: Category };\nconst DateTimeService = { provide: 'ChartsDateTime', useValue: DateTime };\nconst LogarithmicService = { provide: 'ChartsLogarithmic', useValue: Logarithmic };\nconst LegendService = { provide: 'ChartsLegend', useValue: Legend };\nconst ZoomService = { provide: 'ChartsZoom', useValue: Zoom };\nconst DataLabelService = { provide: 'ChartsDataLabel', useValue: DataLabel };\nconst SelectionService = { provide: 'ChartsSelection', useValue: Selection };\nconst ChartAnnotationService = { provide: 'ChartsChartAnnotation', useValue: ChartAnnotation };\nconst HiloSeriesService = { provide: 'ChartsHiloSeries', useValue: HiloSeries };\nconst HiloOpenCloseSeriesService = { provide: 'ChartsHiloOpenCloseSeries', useValue: HiloOpenCloseSeries };\nconst WaterfallSeriesService = { provide: 'ChartsWaterfallSeries', useValue: WaterfallSeries };\nconst RangeAreaSeriesService = { provide: 'ChartsRangeAreaSeries', useValue: RangeAreaSeries };\nconst CandleSeriesService = { provide: 'ChartsCandleSeries', useValue: CandleSeries };\nconst PolarSeriesService = { provide: 'ChartsPolarSeries', useValue: PolarSeries };\nconst RadarSeriesService = { provide: 'ChartsRadarSeries', useValue: RadarSeries };\nconst SmaIndicatorService = { provide: 'ChartsSmaIndicator', useValue: SmaIndicator };\nconst TmaIndicatorService = { provide: 'ChartsTmaIndicator', useValue: TmaIndicator };\nconst EmaIndicatorService = { provide: 'ChartsEmaIndicator', useValue: EmaIndicator };\nconst AccumulationDistributionIndicatorService = { provide: 'ChartsAccumulationDistributionIndicator', useValue: AccumulationDistributionIndicator };\nconst MacdIndicatorService = { provide: 'ChartsMacdIndicator', useValue: MacdIndicator };\nconst AtrIndicatorService = { provide: 'ChartsAtrIndicator', useValue: AtrIndicator };\nconst RsiIndicatorService = { provide: 'ChartsRsiIndicator', useValue: RsiIndicator };\nconst MomentumIndicatorService = { provide: 'ChartsMomentumIndicator', useValue: MomentumIndicator };\nconst StochasticIndicatorService = { provide: 'ChartsStochasticIndicator', useValue: StochasticIndicator };\nconst BollingerBandsService = { provide: 'ChartsBollingerBands', useValue: BollingerBands };\nconst BoxAndWhiskerSeriesService = { provide: 'ChartsBoxAndWhiskerSeries', useValue: BoxAndWhiskerSeries };\nconst HistogramSeriesService = { provide: 'ChartsHistogramSeries', useValue: HistogramSeries };\nconst ErrorBarService = { provide: 'ChartsErrorBar', useValue: ErrorBar };\nconst TrendlinesService = { provide: 'ChartsTrendlines', useValue: Trendlines };\nconst DateTimeCategoryService = { provide: 'ChartsDateTimeCategory', useValue: DateTimeCategory };\nconst MultiColoredLineSeriesService = { provide: 'ChartsMultiColoredLineSeries', useValue: MultiColoredLineSeries };\nconst MultiColoredAreaSeriesService = { provide: 'ChartsMultiColoredAreaSeries', useValue: MultiColoredAreaSeries };\nconst MultiLevelLabelService = { provide: 'ChartsMultiLevelLabel', useValue: MultiLevelLabel };\nconst ParetoSeriesService = { provide: 'ChartsParetoSeries', useValue: ParetoSeries };\nconst ExportService = { provide: 'ChartsExport', useValue: Export };\nconst DataEditingService = { provide: 'ChartsDataEditing', useValue: DataEditing };\n/**\n * NgModule definition for the Chart component with providers.\n */\nclass ChartAllModule {\n}\nChartAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, ChartModule],\n                exports: [\n                    ChartModule\n                ],\n                providers: [\n                    LineSeriesService,\n                    ScatterSeriesService,\n                    ColumnSeriesService,\n                    SplineSeriesService,\n                    SplineAreaSeriesService,\n                    StripLineService,\n                    AreaSeriesService,\n                    ScrollBarService,\n                    StepLineSeriesService,\n                    StepAreaSeriesService,\n                    StackingColumnSeriesService,\n                    StackingLineSeriesService,\n                    StackingAreaSeriesService,\n                    BarSeriesService,\n                    StackingBarSeriesService,\n                    RangeColumnSeriesService,\n                    BubbleSeriesService,\n                    TooltipService,\n                    CrosshairService,\n                    CategoryService,\n                    DateTimeService,\n                    LogarithmicService,\n                    LegendService,\n                    ZoomService,\n                    DataLabelService,\n                    SelectionService,\n                    ChartAnnotationService,\n                    HiloSeriesService,\n                    HiloOpenCloseSeriesService,\n                    WaterfallSeriesService,\n                    RangeAreaSeriesService,\n                    CandleSeriesService,\n                    PolarSeriesService,\n                    RadarSeriesService,\n                    SmaIndicatorService,\n                    TmaIndicatorService,\n                    EmaIndicatorService,\n                    AccumulationDistributionIndicatorService,\n                    MacdIndicatorService,\n                    AtrIndicatorService,\n                    RsiIndicatorService,\n                    MomentumIndicatorService,\n                    StochasticIndicatorService,\n                    BollingerBandsService,\n                    BoxAndWhiskerSeriesService,\n                    HistogramSeriesService,\n                    ErrorBarService,\n                    TrendlinesService,\n                    DateTimeCategoryService,\n                    MultiColoredLineSeriesService,\n                    MultiColoredAreaSeriesService,\n                    MultiLevelLabelService,\n                    ParetoSeriesService,\n                    ExportService,\n                    DataEditingService\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nChartAllModule.ctorParameters = () => [];\n\nvar __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$3 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input$12 = ['animation', 'border', 'dataLabel', 'dataSource', 'emptyPointSettings', 'enableTooltip', 'endAngle', 'explode', 'explodeAll', 'explodeIndex', 'explodeOffset', 'gapRatio', 'groupMode', 'groupTo', 'height', 'innerRadius', 'legendShape', 'name', 'neckHeight', 'neckWidth', 'opacity', 'palettes', 'pointColorMapping', 'pyramidMode', 'query', 'radius', 'selectionStyle', 'startAngle', 'tooltipMappingName', 'type', 'visible', 'width', 'xName', 'yName'];\nlet outputs$13 = [];\n/**\n * AccumulationSeries Directive\n * ```html\n * <e-accumulation-series-collection>\n * <e-accumulation-series></e-accumulation-series>\n * </e-accumulation-series-collection>\n * ```\n */\nclass AccumulationSeriesDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$13);\n    }\n}\nAccumulationSeriesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-accumulation-series-collection>e-accumulation-series',\n                inputs: input$12,\n                outputs: outputs$13,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nAccumulationSeriesDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nAccumulationSeriesDirective.propDecorators = {\n    'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate',] },],\n};\n__decorate$3([\n    Template(),\n    __metadata$3(\"design:type\", Object)\n], AccumulationSeriesDirective.prototype, \"dataLabel_template\", void 0);\n/**\n * AccumulationSeries Array Directive\n */\nclass AccumulationSeriesCollectionDirective extends ArrayBase {\n    constructor() {\n        super('series');\n    }\n}\nAccumulationSeriesCollectionDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ej-accumulationchart>e-accumulation-series-collection',\n                queries: {\n                    children: new ContentChildren(AccumulationSeriesDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nAccumulationSeriesCollectionDirective.ctorParameters = () => [];\n\nvar __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$4 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input$13 = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'y'];\nlet outputs$14 = [];\n/**\n * AccumulationAnnotations Directive\n * ```html\n * <e-accumulation-annotations>\n * <e-accumulation-annotation></e-accumulation-annotation>\n * </e-accumulation-annotations>\n * ```\n */\nclass AccumulationAnnotationDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$14);\n    }\n}\nAccumulationAnnotationDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-accumulation-annotations>e-accumulation-annotation',\n                inputs: input$13,\n                outputs: outputs$14,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nAccumulationAnnotationDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nAccumulationAnnotationDirective.propDecorators = {\n    'content': [{ type: ContentChild, args: ['content',] },],\n};\n__decorate$4([\n    Template(),\n    __metadata$4(\"design:type\", Object)\n], AccumulationAnnotationDirective.prototype, \"content\", void 0);\n/**\n * AccumulationAnnotation Array Directive\n */\nclass AccumulationAnnotationsDirective extends ArrayBase {\n    constructor() {\n        super('annotations');\n    }\n}\nAccumulationAnnotationsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ej-accumulationchart>e-accumulation-annotations',\n                queries: {\n                    children: new ContentChildren(AccumulationAnnotationDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nAccumulationAnnotationsDirective.ctorParameters = () => [];\n\nvar __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$5 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$1 = ['annotations', 'background', 'backgroundImage', 'border', 'center', 'currencyCode', 'dataSource', 'enableAnimation', 'enableBorderOnMouseMove', 'enableExport', 'enablePersistence', 'enableRtl', 'enableSmartLabels', 'height', 'isMultiSelect', 'legendSettings', 'locale', 'margin', 'selectedDataIndexes', 'selectionMode', 'series', 'subTitle', 'subTitleStyle', 'theme', 'title', 'titleStyle', 'tooltip', 'useGroupingSeparator', 'width'];\nconst outputs$15 = ['animationComplete', 'annotationRender', 'beforePrint', 'chartMouseClick', 'chartMouseDown', 'chartMouseLeave', 'chartMouseMove', 'chartMouseUp', 'legendRender', 'load', 'loaded', 'pointClick', 'pointMove', 'pointRender', 'resized', 'seriesRender', 'textRender', 'tooltipRender', 'dataSourceChange'];\nconst twoWays$1 = ['dataSource'];\n/**\n * AccumulationChart Component\n * ```html\n * <ejs-accumulationchart></ejs-accumulationchart>\n * ```\n */\nlet AccumulationChartComponent = class AccumulationChartComponent extends AccumulationChart {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['series', 'annotations'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n            let mod = this.injector.get('ChartsPieSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_a) { }\n        try {\n            let mod = this.injector.get('ChartsFunnelSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_b) { }\n        try {\n            let mod = this.injector.get('ChartsPyramidSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_c) { }\n        try {\n            let mod = this.injector.get('ChartsAccumulationTooltip');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_d) { }\n        try {\n            let mod = this.injector.get('ChartsAccumulationLegend');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_e) { }\n        try {\n            let mod = this.injector.get('ChartsAccumulationSelection');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_f) { }\n        try {\n            let mod = this.injector.get('ChartsAccumulationDataLabel');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_g) { }\n        try {\n            let mod = this.injector.get('ChartsAccumulationAnnotation');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_h) { }\n        try {\n            let mod = this.injector.get('ChartsExport');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_j) { }\n        this.registerEvents(outputs$15);\n        this.addTwoWay.call(this, twoWays$1);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n    }\n};\nAccumulationChartComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-accumulationchart',\n                inputs: inputs$1,\n                outputs: outputs$15,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childSeries: new ContentChild(AccumulationSeriesCollectionDirective),\n                    childAnnotations: new ContentChild(AccumulationAnnotationsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nAccumulationChartComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nAccumulationChartComponent.propDecorators = {\n    'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate',] },],\n};\n__decorate$5([\n    Template(),\n    __metadata$5(\"design:type\", Object)\n], AccumulationChartComponent.prototype, \"tooltip_template\", void 0);\nAccumulationChartComponent = __decorate$5([\n    ComponentMixins([ComponentBase]),\n    __metadata$5(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], AccumulationChartComponent);\n\n/**\n * NgModule definition for the AccumulationChart component.\n */\nclass AccumulationChartModule {\n}\nAccumulationChartModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    AccumulationChartComponent,\n                    AccumulationSeriesDirective,\n                    AccumulationSeriesCollectionDirective,\n                    AccumulationAnnotationDirective,\n                    AccumulationAnnotationsDirective\n                ],\n                exports: [\n                    AccumulationChartComponent,\n                    AccumulationSeriesDirective,\n                    AccumulationSeriesCollectionDirective,\n                    AccumulationAnnotationDirective,\n                    AccumulationAnnotationsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nAccumulationChartModule.ctorParameters = () => [];\n\nconst PieSeriesService = { provide: 'ChartsPieSeries', useValue: PieSeries };\nconst FunnelSeriesService = { provide: 'ChartsFunnelSeries', useValue: FunnelSeries };\nconst PyramidSeriesService = { provide: 'ChartsPyramidSeries', useValue: PyramidSeries };\nconst AccumulationTooltipService = { provide: 'ChartsAccumulationTooltip', useValue: AccumulationTooltip };\nconst AccumulationLegendService = { provide: 'ChartsAccumulationLegend', useValue: AccumulationLegend };\nconst AccumulationSelectionService = { provide: 'ChartsAccumulationSelection', useValue: AccumulationSelection };\nconst AccumulationDataLabelService = { provide: 'ChartsAccumulationDataLabel', useValue: AccumulationDataLabel };\nconst AccumulationAnnotationService = { provide: 'ChartsAccumulationAnnotation', useValue: AccumulationAnnotation };\n/**\n * NgModule definition for the AccumulationChart component with providers.\n */\nclass AccumulationChartAllModule {\n}\nAccumulationChartAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, AccumulationChartModule],\n                exports: [\n                    AccumulationChartModule\n                ],\n                providers: [\n                    PieSeriesService,\n                    FunnelSeriesService,\n                    PyramidSeriesService,\n                    AccumulationTooltipService,\n                    AccumulationLegendService,\n                    AccumulationSelectionService,\n                    AccumulationDataLabelService,\n                    AccumulationAnnotationService\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nAccumulationChartAllModule.ctorParameters = () => [];\n\nlet input$14 = ['animation', 'border', 'dashArray', 'dataSource', 'fill', 'opacity', 'query', 'type', 'width', 'xName', 'yName'];\nlet outputs$16 = [];\n/**\n * RangenavigatorSeries Directive\n * ```html\n * <e-rangenavigator-series-collection>\n * <e-rangenavigator-series></e-rangenavigator-series>\n * </e-rangenavigator-series-collection>\n * ```\n */\nclass RangenavigatorSeriesDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$16);\n    }\n}\nRangenavigatorSeriesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-rangenavigator-series-collection>e-rangenavigator-series',\n                inputs: input$14,\n                outputs: outputs$16,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nRangenavigatorSeriesDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * RangenavigatorSeries Array Directive\n */\nclass RangenavigatorSeriesCollectionDirective extends ArrayBase {\n    constructor() {\n        super('series');\n    }\n}\nRangenavigatorSeriesCollectionDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ej-rangenavigator>e-rangenavigator-series-collection',\n                queries: {\n                    children: new ContentChildren(RangenavigatorSeriesDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nRangenavigatorSeriesCollectionDirective.ctorParameters = () => [];\n\nvar __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$6 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$2 = ['allowSnapping', 'animationDuration', 'dataSource', 'disableRangeSelector', 'enableDeferredUpdate', 'enableGrouping', 'enablePersistence', 'enableRtl', 'groupBy', 'height', 'interval', 'intervalType', 'labelFormat', 'labelIntersectAction', 'labelPosition', 'labelStyle', 'locale', 'logBase', 'majorGridLines', 'majorTickLines', 'margin', 'maximum', 'minimum', 'navigatorBorder', 'navigatorStyleSettings', 'periodSelectorSettings', 'query', 'secondaryLabelAlignment', 'series', 'skeleton', 'skeletonType', 'theme', 'tickPosition', 'tooltip', 'useGroupingSeparator', 'value', 'valueType', 'width', 'xName', 'yName'];\nconst outputs$17 = ['beforePrint', 'changed', 'labelRender', 'load', 'loaded', 'resized', 'selectorRender', 'tooltipRender', 'dataSourceChange'];\nconst twoWays$2 = ['dataSource'];\n/**\n * RangeNavigator Component\n * ```html\n * <ejs-rangenavigator></ejs-rangenavigator>\n * ```\n */\nlet RangeNavigatorComponent = class RangeNavigatorComponent extends RangeNavigator {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['series'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n            let mod = this.injector.get('ChartsRangeTooltip');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_a) { }\n        try {\n            let mod = this.injector.get('ChartsPeriodSelector');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_b) { }\n        try {\n            let mod = this.injector.get('ChartsAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_c) { }\n        try {\n            let mod = this.injector.get('ChartsStepLineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_d) { }\n        try {\n            let mod = this.injector.get('ChartsDateTime');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_e) { }\n        try {\n            let mod = this.injector.get('ChartsLogarithmic');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_f) { }\n        try {\n            let mod = this.injector.get('ChartsExport');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_g) { }\n        this.registerEvents(outputs$17);\n        this.addTwoWay.call(this, twoWays$2);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n    }\n};\nRangeNavigatorComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-rangenavigator',\n                inputs: inputs$2,\n                outputs: outputs$17,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childSeries: new ContentChild(RangenavigatorSeriesCollectionDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nRangeNavigatorComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nRangeNavigatorComponent.propDecorators = {\n    'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate',] },],\n};\n__decorate$6([\n    Template(),\n    __metadata$6(\"design:type\", Object)\n], RangeNavigatorComponent.prototype, \"tooltip_template\", void 0);\nRangeNavigatorComponent = __decorate$6([\n    ComponentMixins([ComponentBase]),\n    __metadata$6(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], RangeNavigatorComponent);\n\n/**\n * NgModule definition for the RangeNavigator component.\n */\nclass RangeNavigatorModule {\n}\nRangeNavigatorModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    RangeNavigatorComponent,\n                    RangenavigatorSeriesDirective,\n                    RangenavigatorSeriesCollectionDirective\n                ],\n                exports: [\n                    RangeNavigatorComponent,\n                    RangenavigatorSeriesDirective,\n                    RangenavigatorSeriesCollectionDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nRangeNavigatorModule.ctorParameters = () => [];\n\nconst RangeTooltipService = { provide: 'ChartsRangeTooltip', useValue: RangeTooltip };\nconst PeriodSelectorService = { provide: 'ChartsPeriodSelector', useValue: PeriodSelector };\n/**\n * NgModule definition for the RangeNavigator component with providers.\n */\nclass RangeNavigatorAllModule {\n}\nRangeNavigatorAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, RangeNavigatorModule],\n                exports: [\n                    RangeNavigatorModule\n                ],\n                providers: [\n                    RangeTooltipService,\n                    PeriodSelectorService\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nRangeNavigatorAllModule.ctorParameters = () => [];\n\nlet input$15 = ['color', 'endRange', 'opacity', 'startRange'];\nlet outputs$18 = [];\nclass RangeBandSettingDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$18);\n    }\n}\nRangeBandSettingDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-rangeBandSettings>e-rangeBandSetting',\n                inputs: input$15,\n                outputs: outputs$18,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nRangeBandSettingDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * RangeBandSetting Array Directive\n */\nclass RangeBandSettingsDirective extends ArrayBase {\n    constructor() {\n        super('rangebandsettings');\n    }\n}\nRangeBandSettingsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-sparkline>e-rangeBandSettings',\n                queries: {\n                    children: new ContentChildren(RangeBandSettingDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nRangeBandSettingsDirective.ctorParameters = () => [];\n\nvar __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$7 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$3 = ['axisSettings', 'border', 'containerArea', 'dataLabelSettings', 'dataSource', 'enablePersistence', 'enableRtl', 'endPointColor', 'fill', 'format', 'height', 'highPointColor', 'lineWidth', 'locale', 'lowPointColor', 'markerSettings', 'negativePointColor', 'opacity', 'padding', 'palette', 'query', 'rangeBandSettings', 'startPointColor', 'theme', 'tiePointColor', 'tooltipSettings', 'type', 'useGroupingSeparator', 'valueType', 'width', 'xName', 'yName'];\nconst outputs$19 = ['axisRendering', 'dataLabelRendering', 'load', 'loaded', 'markerRendering', 'pointRegionMouseClick', 'pointRegionMouseMove', 'pointRendering', 'resize', 'seriesRendering', 'sparklineMouseClick', 'sparklineMouseMove', 'tooltipInitialize'];\nconst twoWays$3 = [''];\n/**\n * Sparkline Component\n * ```html\n * <ejs-sparkline></ejs-sparkline>\n * ```\n */\nlet SparklineComponent = class SparklineComponent extends Sparkline {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['rangeBandSettings'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n            let mod = this.injector.get('ChartsSparklineTooltip');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_a) { }\n        this.registerEvents(outputs$19);\n        this.addTwoWay.call(this, twoWays$3);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n    }\n};\nSparklineComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-sparkline',\n                inputs: inputs$3,\n                outputs: outputs$19,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childRangeBandSettings: new ContentChild(RangeBandSettingsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nSparklineComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nSparklineComponent = __decorate$7([\n    ComponentMixins([ComponentBase]),\n    __metadata$7(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], SparklineComponent);\n\n/**\n * NgModule definition for the Sparkline component.\n */\nclass SparklineModule {\n}\nSparklineModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    SparklineComponent,\n                    RangeBandSettingDirective,\n                    RangeBandSettingsDirective\n                ],\n                exports: [\n                    SparklineComponent,\n                    RangeBandSettingDirective,\n                    RangeBandSettingsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nSparklineModule.ctorParameters = () => [];\n\nconst SparklineTooltipService = { provide: 'ChartsSparklineTooltip', useValue: SparklineTooltip };\n/**\n * NgModule definition for the Sparkline component with providers.\n */\nclass SparklineAllModule {\n}\nSparklineAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, SparklineModule],\n                exports: [\n                    SparklineModule\n                ],\n                providers: [\n                    SparklineTooltipService\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nSparklineAllModule.ctorParameters = () => [];\n\nlet input$16 = ['animationDuration', 'dataSource', 'enableAnimation', 'enableSmartLabels', 'fill', 'marker', 'name', 'opacity', 'points', 'reactance', 'resistance', 'tooltip', 'visibility', 'width'];\nlet outputs$20 = [];\nclass SmithchartSeriesDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$20);\n    }\n}\nSmithchartSeriesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-seriesCollection>e-series',\n                inputs: input$16,\n                outputs: outputs$20,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nSmithchartSeriesDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * SmithchartSeries Array Directive\n */\nclass SmithchartSeriesCollectionDirective extends ArrayBase {\n    constructor() {\n        super('series');\n    }\n}\nSmithchartSeriesCollectionDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-smithchart>e-seriesCollection',\n                queries: {\n                    children: new ContentChildren(SmithchartSeriesDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nSmithchartSeriesCollectionDirective.ctorParameters = () => [];\n\nvar __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$8 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$4 = ['background', 'border', 'elementSpacing', 'enablePersistence', 'enableRtl', 'font', 'height', 'horizontalAxis', 'legendSettings', 'locale', 'margin', 'radialAxis', 'radius', 'renderType', 'series', 'theme', 'title', 'width'];\nconst outputs$21 = ['animationComplete', 'axisLabelRender', 'beforePrint', 'legendRender', 'load', 'loaded', 'seriesRender', 'subtitleRender', 'textRender', 'titleRender'];\nconst twoWays$4 = [''];\n/**\n * Smithchart Component\n * ```html\n * <ejs-smithchart></ejs-smithchart>\n * ```\n */\nlet SmithchartComponent = class SmithchartComponent extends Smithchart {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['series'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n            let mod = this.injector.get('ChartsSmithchartLegend');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_a) { }\n        try {\n            let mod = this.injector.get('ChartsTooltipRender');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_b) { }\n        this.registerEvents(outputs$21);\n        this.addTwoWay.call(this, twoWays$4);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n    }\n};\nSmithchartComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-smithchart',\n                inputs: inputs$4,\n                outputs: outputs$21,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childSeries: new ContentChild(SmithchartSeriesCollectionDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nSmithchartComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nSmithchartComponent = __decorate$8([\n    ComponentMixins([ComponentBase]),\n    __metadata$8(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], SmithchartComponent);\n\n/**\n * NgModule definition for the Smithchart component.\n */\nclass SmithchartModule {\n}\nSmithchartModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    SmithchartComponent,\n                    SmithchartSeriesDirective,\n                    SmithchartSeriesCollectionDirective\n                ],\n                exports: [\n                    SmithchartComponent,\n                    SmithchartSeriesDirective,\n                    SmithchartSeriesCollectionDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nSmithchartModule.ctorParameters = () => [];\n\nconst SmithchartLegendService = { provide: 'ChartsSmithchartLegend', useValue: SmithchartLegend };\nconst TooltipRenderService = { provide: 'ChartsTooltipRender', useValue: TooltipRender };\n/**\n * NgModule definition for the Smithchart component with providers.\n */\nclass SmithchartAllModule {\n}\nSmithchartAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, SmithchartModule],\n                exports: [\n                    SmithchartModule\n                ],\n                providers: [\n                    SmithchartLegendService,\n                    TooltipRenderService\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nSmithchartAllModule.ctorParameters = () => [];\n\nlet input$17 = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet outputs$22 = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series>\n * <e-trendlines>\n * </e-trendline>\n * <e-trendline>\n * </e-trendlines>\n * </e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nclass StockChartTrendlineDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$22);\n    }\n}\nStockChartTrendlineDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-series>e-trendlines>e-trendline',\n                inputs: input$17,\n                outputs: outputs$22,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartTrendlineDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartTrendline Array Directive\n */\nclass StockChartTrendlinesDirective extends ArrayBase {\n    constructor() {\n        super('trendlines');\n    }\n}\nStockChartTrendlinesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-series>e-trendlines',\n                queries: {\n                    children: new ContentChildren(StockChartTrendlineDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartTrendlinesDirective.ctorParameters = () => [];\n\nlet input$18 = ['animation', 'bearFillColor', 'border', 'bullFillColor', 'cardinalSplineTension', 'close', 'columnSpacing', 'columnWidth', 'cornerRadius', 'dashArray', 'dataSource', 'emptyPointSettings', 'enableSolidCandles', 'enableTooltip', 'fill', 'high', 'low', 'marker', 'name', 'opacity', 'open', 'pointColorMapping', 'query', 'selectionStyle', 'tooltipMappingName', 'trendlines', 'type', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName'];\nlet outputs$23 = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series></e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nclass StockChartSeriesDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        this.tags = ['trendlines'];\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$23);\n    }\n}\nStockChartSeriesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-series-collection>e-stockchart-series',\n                inputs: input$18,\n                outputs: outputs$23,\n                queries: {\n                    childTrendlines: new ContentChild(StockChartTrendlinesDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartSeriesDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartSeries Array Directive\n */\nclass StockChartSeriesCollectionDirective extends ArrayBase {\n    constructor() {\n        super('series');\n    }\n}\nStockChartSeriesCollectionDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-series-collection',\n                queries: {\n                    children: new ContentChildren(StockChartSeriesDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartSeriesCollectionDirective.ctorParameters = () => [];\n\nlet input$19 = ['border', 'color', 'dashArray', 'delay', 'duration', 'enable', 'end', 'horizontalAlignment', 'isRepeat', 'isSegmented', 'opacity', 'repeatEvery', 'repeatUntil', 'rotation', 'segmentAxisName', 'segmentEnd', 'segmentStart', 'size', 'sizeType', 'start', 'startFromAxis', 'text', 'textStyle', 'verticalAlignment', 'visible', 'zIndex'];\nlet outputs$24 = [];\n/**\n * StripLine Directive\n * ```html\n * <e-stockchart-axis>\n * <e-striplines>\n * <e-stripline></e-stripline>\n * </e-striplines>\n * </e-stock-chart-axis>\n * ```\n */\nclass StockChartStripLineDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$24);\n    }\n}\nStockChartStripLineDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-axis>e-stockchart-striplines>e-stockchart-stripline',\n                inputs: input$19,\n                outputs: outputs$24,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartStripLineDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartStripLine Array Directive\n */\nclass StockChartStripLinesDirective extends ArrayBase {\n    constructor() {\n        super('striplines');\n    }\n}\nStockChartStripLinesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-axis>e-stockchart-striplines',\n                queries: {\n                    children: new ContentChildren(StockChartStripLineDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartStripLinesDirective.ctorParameters = () => [];\n\nlet input$20 = ['coefficient', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableTrim', 'interval', 'intervalType', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'rangePadding', 'rowIndex', 'skeleton', 'skeletonType', 'span', 'startAngle', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet outputs$25 = [];\n/**\n * Axis Directive\n * ```html\n * <e-stockchart-axes><e-stockchart-axis></e-stockchart-axis></e-stockchart-axes>\n * ```\n */\nclass StockChartAxisDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        this.tags = ['stripLines'];\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$25);\n    }\n}\nStockChartAxisDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-axes>e-stockchart-axis',\n                inputs: input$20,\n                outputs: outputs$25,\n                queries: {\n                    childStripLines: new ContentChild(StockChartStripLinesDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartAxisDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartAxis Array Directive\n */\nclass StockChartAxesDirective extends ArrayBase {\n    constructor() {\n        super('axes');\n    }\n}\nStockChartAxesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-axes',\n                queries: {\n                    children: new ContentChildren(StockChartAxisDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartAxesDirective.ctorParameters = () => [];\n\nlet input$21 = ['border', 'height'];\nlet outputs$26 = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nclass StockChartRowDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$26);\n    }\n}\nStockChartRowDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-rows>e-striplines>e-stockchart-row',\n                inputs: input$21,\n                outputs: outputs$26,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartRowDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartRow Array Directive\n */\nclass StockChartRowsDirective extends ArrayBase {\n    constructor() {\n        super('rows');\n    }\n}\nStockChartRowsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-rows',\n                queries: {\n                    children: new ContentChildren(StockChartRowDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartRowsDirective.ctorParameters = () => [];\n\nvar __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$9 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input$22 = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet outputs$27 = [];\n/**\n * Annotation Directive\n * ```html\n * <e-stockchart-annotations><e-stockchart-annotation></e-stockchart-annotation><e-stockchart-annotations>\n * ```\n */\nclass StockChartAnnotationDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$27);\n    }\n}\nStockChartAnnotationDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart-annotations>e-stockchart-annotation',\n                inputs: input$22,\n                outputs: outputs$27,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartAnnotationDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nStockChartAnnotationDirective.propDecorators = {\n    'content': [{ type: ContentChild, args: ['content',] },],\n};\n__decorate$9([\n    Template(),\n    __metadata$9(\"design:type\", Object)\n], StockChartAnnotationDirective.prototype, \"content\", void 0);\n/**\n * StockChartAnnotation Array Directive\n */\nclass StockChartAnnotationsDirective extends ArrayBase {\n    constructor() {\n        super('annotations');\n    }\n}\nStockChartAnnotationsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-annotations',\n                queries: {\n                    children: new ContentChildren(StockChartAnnotationDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartAnnotationsDirective.ctorParameters = () => [];\n\nlet input$23 = ['point', 'series'];\nlet outputs$28 = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nclass StockChartSelectedDataIndexDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$28);\n    }\n}\nStockChartSelectedDataIndexDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart-selectedDataIndexes>e-stockchart-selectedDataIndex',\n                inputs: input$23,\n                outputs: outputs$28,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartSelectedDataIndexDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartSelectedDataIndex Array Directive\n */\nclass StockChartSelectedDataIndexesDirective extends ArrayBase {\n    constructor() {\n        super('selecteddataindexes');\n    }\n}\nStockChartSelectedDataIndexesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-selectedDataIndexes',\n                queries: {\n                    children: new ContentChildren(StockChartSelectedDataIndexDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartSelectedDataIndexesDirective.ctorParameters = () => [];\n\nlet input$24 = ['interval', 'intervalType', 'selected', 'text'];\nlet outputs$29 = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-periods>\n * <e-stockchart-period></e-stockchart-period>\n * </e-stockchart-periods>\n * ```\n */\nclass StockChartPeriodDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$29);\n    }\n}\nStockChartPeriodDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-indicators>e-stockchart-period',\n                inputs: input$24,\n                outputs: outputs$29,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartPeriodDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartPeriod Array Directive\n */\nclass StockChartPeriodsDirective extends ArrayBase {\n    constructor() {\n        super('periods');\n    }\n}\nStockChartPeriodsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-periods',\n                queries: {\n                    children: new ContentChildren(StockChartPeriodDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartPeriodsDirective.ctorParameters = () => [];\n\nlet input$25 = ['background', 'border', 'date', 'description', 'placeAt', 'showOnSeries', 'text', 'textStyle', 'type'];\nlet outputs$30 = [];\n/**\n * StockEvents\n * ```html\n * <e-stockchart-stockevents>\n * <e-stockchart-stockevent></e-stockchart-stockevent>\n * </e-stockchart-stockevents>\n * ```\n */\nclass StockEventDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$30);\n    }\n}\nStockEventDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-indicators>e-stockchart-stockevent',\n                inputs: input$25,\n                outputs: outputs$30,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockEventDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockEvent Array Directive\n */\nclass StockEventsDirective extends ArrayBase {\n    constructor() {\n        super('stockevents');\n    }\n}\nStockEventsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-stockevents',\n                queries: {\n                    children: new ContentChildren(StockEventDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockEventsDirective.ctorParameters = () => [];\n\nlet input$26 = ['animation', 'bandColor', 'close', 'dPeriod', 'dashArray', 'dataSource', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet outputs$31 = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-indicators>\n * <e-stockchart-indicator></e-stockchart-indicator>\n * </e-stockchart-indicators>\n * ```\n */\nclass StockChartIndicatorDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$31);\n    }\n}\nStockChartIndicatorDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-stockchart-indicators>e-stockchart-indicator',\n                inputs: input$26,\n                outputs: outputs$31,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartIndicatorDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * StockChartIndicator Array Directive\n */\nclass StockChartIndicatorsDirective extends ArrayBase {\n    constructor() {\n        super('indicators');\n    }\n}\nStockChartIndicatorsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-stockchart>e-stockchart-indicators',\n                queries: {\n                    children: new ContentChildren(StockChartIndicatorDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartIndicatorsDirective.ctorParameters = () => [];\n\nvar __decorate$10 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$10 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$5 = ['annotations', 'axes', 'background', 'border', 'chartArea', 'crosshair', 'dataSource', 'enableCustomRange', 'enablePeriodSelector', 'enablePersistence', 'enableRtl', 'enableSelector', 'exportType', 'height', 'indicatorType', 'indicators', 'isMultiSelect', 'isSelect', 'isTransposed', 'locale', 'margin', 'periods', 'primaryXAxis', 'primaryYAxis', 'rows', 'selectedDataIndexes', 'selectionMode', 'series', 'seriesType', 'stockEvents', 'theme', 'title', 'titleStyle', 'tooltip', 'trendlineType', 'width', 'zoomSettings'];\nconst outputs$32 = ['axisLabelRender', 'load', 'loaded', 'onZooming', 'pointClick', 'pointMove', 'rangeChange', 'selectorRender', 'seriesRender', 'stockChartMouseClick', 'stockChartMouseDown', 'stockChartMouseLeave', 'stockChartMouseMove', 'stockChartMouseUp', 'stockEventRender', 'tooltipRender', 'dataSourceChange'];\nconst twoWays$5 = ['dataSource'];\n/**\n * Stock Chart Component\n * ```html\n * <ejs-stockchart></ejs-stockchart>\n * ```\n */\nlet StockChartComponent = class StockChartComponent extends StockChart {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['series', 'axes', 'rows', 'annotations', 'selectedDataIndexes', 'periods', 'stockEvents', 'indicators'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n            let mod = this.injector.get('ChartsLineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_a) { }\n        try {\n            let mod = this.injector.get('ChartsColumnSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_b) { }\n        try {\n            let mod = this.injector.get('ChartsSplineSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_c) { }\n        try {\n            let mod = this.injector.get('ChartsSplineAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_d) { }\n        try {\n            let mod = this.injector.get('ChartsStripLine');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_e) { }\n        try {\n            let mod = this.injector.get('ChartsAreaSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_f) { }\n        try {\n            let mod = this.injector.get('ChartsTooltip');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_g) { }\n        try {\n            let mod = this.injector.get('ChartsCrosshair');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_h) { }\n        try {\n            let mod = this.injector.get('ChartsDateTime');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_j) { }\n        try {\n            let mod = this.injector.get('ChartsZoom');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_k) { }\n        try {\n            let mod = this.injector.get('ChartsDataLabel');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_l) { }\n        try {\n            let mod = this.injector.get('ChartsSelection');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_m) { }\n        try {\n            let mod = this.injector.get('ChartsChartAnnotation');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_o) { }\n        try {\n            let mod = this.injector.get('ChartsHiloSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_p) { }\n        try {\n            let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_q) { }\n        try {\n            let mod = this.injector.get('ChartsCandleSeries');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_r) { }\n        try {\n            let mod = this.injector.get('ChartsSmaIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_s) { }\n        try {\n            let mod = this.injector.get('ChartsTmaIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_t) { }\n        try {\n            let mod = this.injector.get('ChartsEmaIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_u) { }\n        try {\n            let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_v) { }\n        try {\n            let mod = this.injector.get('ChartsMacdIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_w) { }\n        try {\n            let mod = this.injector.get('ChartsAtrIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_x) { }\n        try {\n            let mod = this.injector.get('ChartsRsiIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_y) { }\n        try {\n            let mod = this.injector.get('ChartsMomentumIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_z) { }\n        try {\n            let mod = this.injector.get('ChartsStochasticIndicator');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_0) { }\n        try {\n            let mod = this.injector.get('ChartsBollingerBands');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_1) { }\n        try {\n            let mod = this.injector.get('ChartsTrendlines');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_2) { }\n        try {\n            let mod = this.injector.get('ChartsRangeTooltip');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_3) { }\n        try {\n            let mod = this.injector.get('ChartsExport');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_4) { }\n        this.registerEvents(outputs$32);\n        this.addTwoWay.call(this, twoWays$5);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n    }\n};\nStockChartComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-stockchart',\n                inputs: inputs$5,\n                outputs: outputs$32,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childSeries: new ContentChild(StockChartSeriesCollectionDirective),\n                    childAxes: new ContentChild(StockChartAxesDirective),\n                    childRows: new ContentChild(StockChartRowsDirective),\n                    childAnnotations: new ContentChild(StockChartAnnotationsDirective),\n                    childSelectedDataIndexes: new ContentChild(StockChartSelectedDataIndexesDirective),\n                    childPeriods: new ContentChild(StockChartPeriodsDirective),\n                    childStockEvents: new ContentChild(StockEventsDirective),\n                    childIndicators: new ContentChild(StockChartIndicatorsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nStockChartComponent.propDecorators = {\n    'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate',] },],\n};\n__decorate$10([\n    Template(),\n    __metadata$10(\"design:type\", Object)\n], StockChartComponent.prototype, \"tooltip_template\", void 0);\nStockChartComponent = __decorate$10([\n    ComponentMixins([ComponentBase]),\n    __metadata$10(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], StockChartComponent);\n\n/**\n * NgModule definition for the StockChart component.\n */\nclass StockChartModule {\n}\nStockChartModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    StockChartComponent,\n                    StockChartTrendlineDirective,\n                    StockChartTrendlinesDirective,\n                    StockChartSeriesDirective,\n                    StockChartSeriesCollectionDirective,\n                    StockChartStripLineDirective,\n                    StockChartStripLinesDirective,\n                    StockChartAxisDirective,\n                    StockChartAxesDirective,\n                    StockChartRowDirective,\n                    StockChartRowsDirective,\n                    StockChartAnnotationDirective,\n                    StockChartAnnotationsDirective,\n                    StockChartSelectedDataIndexDirective,\n                    StockChartSelectedDataIndexesDirective,\n                    StockChartPeriodDirective,\n                    StockChartPeriodsDirective,\n                    StockEventDirective,\n                    StockEventsDirective,\n                    StockChartIndicatorDirective,\n                    StockChartIndicatorsDirective\n                ],\n                exports: [\n                    StockChartComponent,\n                    StockChartTrendlineDirective,\n                    StockChartTrendlinesDirective,\n                    StockChartSeriesDirective,\n                    StockChartSeriesCollectionDirective,\n                    StockChartStripLineDirective,\n                    StockChartStripLinesDirective,\n                    StockChartAxisDirective,\n                    StockChartAxesDirective,\n                    StockChartRowDirective,\n                    StockChartRowsDirective,\n                    StockChartAnnotationDirective,\n                    StockChartAnnotationsDirective,\n                    StockChartSelectedDataIndexDirective,\n                    StockChartSelectedDataIndexesDirective,\n                    StockChartPeriodDirective,\n                    StockChartPeriodsDirective,\n                    StockEventDirective,\n                    StockEventsDirective,\n                    StockChartIndicatorDirective,\n                    StockChartIndicatorsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the StockChart component with providers.\n */\nclass StockChartAllModule {\n}\nStockChartAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, StockChartModule],\n                exports: [\n                    StockChartModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nStockChartAllModule.ctorParameters = () => [];\n\nlet input$27 = ['color', 'end', 'opacity'];\nlet outputs$33 = [];\n/**\n * BulletRange Directive\n * ```html\n * <e-bullet-range-collection>\n * <e-bullet-range></e-bullet-range>\n * </e-bullet-range-collection>\n * ```\n */\nclass BulletRangeDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$33);\n    }\n}\nBulletRangeDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-bullet-range-collection>e-bullet-range',\n                inputs: input$27,\n                outputs: outputs$33,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nBulletRangeDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * BulletRange Array Directive\n */\nclass BulletRangeCollectionDirective extends ArrayBase {\n    constructor() {\n        super('ranges');\n    }\n}\nBulletRangeCollectionDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ej-bulletchart>e-bullet-range-collection',\n                queries: {\n                    children: new ContentChildren(BulletRangeDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nBulletRangeCollectionDirective.ctorParameters = () => [];\n\nvar __decorate$11 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$11 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$6 = ['animation', 'border', 'categoryField', 'categoryLabelStyle', 'dataLabel', 'dataSource', 'enableGroupSeparator', 'enablePersistence', 'enableRtl', 'height', 'interval', 'labelFormat', 'labelPosition', 'labelStyle', 'locale', 'majorTickLines', 'margin', 'maximum', 'minimum', 'minorTickLines', 'minorTicksPerInterval', 'opposedPosition', 'orientation', 'query', 'ranges', 'subtitle', 'subtitleStyle', 'tabIndex', 'targetColor', 'targetField', 'targetTypes', 'targetWidth', 'theme', 'tickPosition', 'title', 'titlePosition', 'titleStyle', 'tooltip', 'type', 'valueBorder', 'valueField', 'valueFill', 'valueHeight', 'width'];\nconst outputs$34 = ['beforePrint', 'load', 'loaded', 'tooltipRender', 'dataSourceChange'];\nconst twoWays$6 = ['dataSource'];\n/**\n * BulletChart Component\n * ```html\n * <ejs-bulletchart></ejs-bulletchart>\n * ```\n */\nlet BulletChartComponent = class BulletChartComponent extends BulletChart {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['ranges'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n            let mod = this.injector.get('ChartsBulletTooltip');\n            if (this.injectedModules.indexOf(mod) === -1) {\n                this.injectedModules.push(mod);\n            }\n        }\n        catch (_a) { }\n        this.registerEvents(outputs$34);\n        this.addTwoWay.call(this, twoWays$6);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n    }\n};\nBulletChartComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-bulletchart',\n                inputs: inputs$6,\n                outputs: outputs$34,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childRanges: new ContentChild(BulletRangeCollectionDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nBulletChartComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nBulletChartComponent.propDecorators = {\n    'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate',] },],\n};\n__decorate$11([\n    Template(),\n    __metadata$11(\"design:type\", Object)\n], BulletChartComponent.prototype, \"tooltip_template\", void 0);\nBulletChartComponent = __decorate$11([\n    ComponentMixins([ComponentBase]),\n    __metadata$11(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], BulletChartComponent);\n\n/**\n * NgModule definition for the BulletChart component.\n */\nclass BulletChartModule {\n}\nBulletChartModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    BulletChartComponent,\n                    BulletRangeDirective,\n                    BulletRangeCollectionDirective\n                ],\n                exports: [\n                    BulletChartComponent,\n                    BulletRangeDirective,\n                    BulletRangeCollectionDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nBulletChartModule.ctorParameters = () => [];\n\nconst BulletTooltipService = { provide: 'ChartsBulletTooltip', useValue: BulletTooltip };\n/**\n * NgModule definition for the BulletChart component with providers.\n */\nclass BulletChartAllModule {\n}\nBulletChartAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, BulletChartModule],\n                exports: [\n                    BulletChartModule\n                ],\n                providers: [\n                    BulletTooltipService\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nBulletChartAllModule.ctorParameters = () => [];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TrendlineDirective, TrendlinesDirective, SegmentDirective, SegmentsDirective, SeriesDirective, SeriesCollectionDirective, StripLineDirective, StripLinesDirective, CategoryDirective, CategoriesDirective, MultiLevelLabelDirective, MultiLevelLabelsDirective, AxisDirective, AxesDirective, RowDirective, RowsDirective, ColumnDirective, ColumnsDirective, AnnotationDirective, AnnotationsDirective, SelectedDataIndexDirective, SelectedDataIndexesDirective, IndicatorDirective, IndicatorsDirective, ChartComponent, ChartModule, ChartAllModule, LineSeriesService, ScatterSeriesService, ColumnSeriesService, SplineSeriesService, SplineAreaSeriesService, StripLineService, AreaSeriesService, ScrollBarService, StepLineSeriesService, StepAreaSeriesService, StackingColumnSeriesService, StackingLineSeriesService, StackingAreaSeriesService, BarSeriesService, StackingBarSeriesService, RangeColumnSeriesService, BubbleSeriesService, TooltipService, CrosshairService, CategoryService, DateTimeService, LogarithmicService, LegendService, ZoomService, DataLabelService, SelectionService, ChartAnnotationService, HiloSeriesService, HiloOpenCloseSeriesService, WaterfallSeriesService, RangeAreaSeriesService, CandleSeriesService, PolarSeriesService, RadarSeriesService, SmaIndicatorService, TmaIndicatorService, EmaIndicatorService, AccumulationDistributionIndicatorService, MacdIndicatorService, AtrIndicatorService, RsiIndicatorService, MomentumIndicatorService, StochasticIndicatorService, BollingerBandsService, BoxAndWhiskerSeriesService, HistogramSeriesService, ErrorBarService, TrendlinesService, DateTimeCategoryService, MultiColoredLineSeriesService, MultiColoredAreaSeriesService, MultiLevelLabelService, ParetoSeriesService, ExportService, DataEditingService, AccumulationSeriesDirective, AccumulationSeriesCollectionDirective, AccumulationAnnotationDirective, AccumulationAnnotationsDirective, AccumulationChartComponent, AccumulationChartModule, AccumulationChartAllModule, PieSeriesService, FunnelSeriesService, PyramidSeriesService, AccumulationTooltipService, AccumulationLegendService, AccumulationSelectionService, AccumulationDataLabelService, AccumulationAnnotationService, RangenavigatorSeriesDirective, RangenavigatorSeriesCollectionDirective, RangeNavigatorComponent, RangeNavigatorModule, RangeNavigatorAllModule, RangeTooltipService, PeriodSelectorService, RangeBandSettingDirective, RangeBandSettingsDirective, SparklineComponent, SparklineModule, SparklineAllModule, SparklineTooltipService, SmithchartSeriesDirective, SmithchartSeriesCollectionDirective, SmithchartComponent, SmithchartModule, SmithchartAllModule, SmithchartLegendService, TooltipRenderService, StockChartTrendlineDirective, StockChartTrendlinesDirective, StockChartSeriesDirective, StockChartSeriesCollectionDirective, StockChartStripLineDirective, StockChartStripLinesDirective, StockChartAxisDirective, StockChartAxesDirective, StockChartRowDirective, StockChartRowsDirective, StockChartAnnotationDirective, StockChartAnnotationsDirective, StockChartSelectedDataIndexDirective, StockChartSelectedDataIndexesDirective, StockChartPeriodDirective, StockChartPeriodsDirective, StockEventDirective, StockEventsDirective, StockChartIndicatorDirective, StockChartIndicatorsDirective, StockChartComponent, StockChartModule, StockChartAllModule, BulletRangeDirective, BulletRangeCollectionDirective, BulletChartComponent, BulletChartModule, BulletChartAllModule, BulletTooltipService, inputs$1 as ɵc, outputs$15 as ɵd, inputs$6 as ɵm, outputs$34 as ɵn, inputs as ɵa, outputs$12 as ɵb, inputs$2 as ɵe, outputs$17 as ɵf, inputs$4 as ɵi, outputs$21 as ɵj, inputs$3 as ɵg, outputs$19 as ɵh, inputs$5 as ɵk, outputs$32 as ɵl };\nexport { CrosshairSettings, ZoomSettings, Chart, Row, Column, MajorGridLines, MinorGridLines, AxisLine, MajorTickLines, MinorTickLines, CrosshairTooltip, Axis, VisibleLabels, DateTime, Category, Logarithmic, DateTimeCategory, NiceInterval, StripLine, Connector, Font, Border, Offset, ChartArea, Margin, Animation, Indexes, CornerRadius, Index, EmptyPointSettings, DragSettings, TooltipSettings, Periods, PeriodSelectorSettings, LineSeries, ColumnSeries, AreaSeries, BarSeries, PolarSeries, RadarSeries, StackingBarSeries, CandleSeries, StackingColumnSeries, StepLineSeries, StepAreaSeries, StackingAreaSeries, StackingLineSeries, ScatterSeries, RangeColumnSeries, WaterfallSeries, HiloSeries, HiloOpenCloseSeries, RangeAreaSeries, BubbleSeries, SplineSeries, HistogramSeries, SplineAreaSeries, TechnicalIndicator, SmaIndicator, EmaIndicator, TmaIndicator, AccumulationDistributionIndicator, AtrIndicator, MomentumIndicator, RsiIndicator, StochasticIndicator, BollingerBands, MacdIndicator, Trendlines, sort, isBreakLabel, rotateTextSize, removeElement, logBase, showTooltip, inside, withIn, logWithIn, withInRange, sum, subArraySum, subtractThickness, subtractRect, degreeToLocation, degreeToRadian, getRotatedRectangleCoordinates, isRotatedRectIntersect, getAngle, subArray, valueToCoefficient, TransformToVisible, indexFinder, CoefficientToVector, valueToPolarCoefficient, Mean, PolarArc, createTooltip, createZoomingLabels, withInBounds, getValueXByPoint, getValueYByPoint, findClipRect, firstToLowerCase, getTransform, getMinPointsDelta, getAnimationFunction, linear, markerAnimate, animateRectElement, pathAnimation, appendClipElement, triggerLabelRender, setRange, getActualDesiredIntervalsCount, templateAnimate, drawSymbol, calculateShapes, getRectLocation, minMax, getElement, getTemplateFunction, createTemplate, getFontStyle, measureElementRect, findlElement, getPoint, appendElement, appendChildElement, getDraggedRectLocation, checkBounds, getLabelText, stopTimer, isCollide, isOverlap, containsRect, calculateRect, convertToHexCode, componentToHex, convertHexToColor, colorNameToHex, getSaturationColor, getMedian, calculateLegendShapes, textTrim, lineBreakLabelTrim, stringToNumber, redrawElement, animateRedrawElement, textElement, calculateSize, createSvg, getTitle, titlePositionX, textWrap, getUnicodeText, blazorTemplatesReset, CustomizeOption, StackValues, RectOption, ImageOption, CircleOption, PolygonOption, ChartLocation, Thickness, ColorValue, PointData, AccPointData, ControlPoints, Crosshair, Tooltip, Zoom, Selection, DataEditing, DataLabel, ErrorBar, DataLabelSettings, MarkerSettings, Points, Trendline, ErrorBarCapSettings, ChartSegment, ErrorBarSettings, SeriesBase, Series, Legend, ChartAnnotation, ChartAnnotationSettings, LabelBorder, MultiLevelCategories, StripLineSettings, MultiLevelLabels, ScrollbarSettingsRange, ScrollbarSettings, BoxAndWhiskerSeries, MultiColoredAreaSeries, MultiColoredLineSeries, MultiColoredSeries, MultiLevelLabel, ScrollBar, ParetoSeries, Export, AccumulationChart, AccumulationAnnotationSettings, AccumulationDataLabelSettings, PieCenter, AccPoints, AccumulationSeries, getSeriesFromIndex, pointByIndex, PieSeries, FunnelSeries, PyramidSeries, AccumulationLegend, AccumulationDataLabel, AccumulationTooltip, AccumulationSelection, AccumulationAnnotation, StockChart, StockChartFont, StockChartBorder, StockChartArea, StockMargin, StockChartStripLineSettings, StockEmptyPointSettings, StockChartConnector, StockSeries, StockChartIndicator, StockChartAxis, StockChartRow, StockChartTrendline, StockChartAnnotationSettings, StockChartIndexes, StockEventsSettings, loaded, legendClick, load, animationComplete, legendRender, textRender, pointRender, seriesRender, axisLabelRender, axisRangeCalculated, axisMultiLabelRender, tooltipRender, chartMouseMove, chartMouseClick, pointClick, pointMove, chartMouseLeave, chartMouseDown, chartMouseUp, zoomComplete, onZooming, dragComplete, selectionComplete, resized, beforePrint, annotationRender, scrollStart, scrollEnd, scrollChanged, stockEventRender, multiLevelLabelClick, dragStart, drag, dragEnd, regSub, regSup, beforeExport, afterExport, Theme, getSeriesColor, getThemeColor, getScrollbarThemeColor, PeriodSelector, RangeNavigator, rangeValueToCoefficient, getXLocation, getRangeValueXByPoint, getExactData, getNearestValue, DataPoint, RangeNavigatorTheme, getRangeThemeColor, RangeNavigatorAxis, RangeSeries, RangeSlider, RangeNavigatorSeries, ThumbSettings, StyleSettings, RangeTooltipSettings, Double, RangeTooltip, BulletChart, Range, MajorTickLinesSettings, MinorTickLinesSettings, BulletLabelStyle, BulletTooltipSettings, BulletDataLabel, BulletChartTheme, getBulletThemeColor, BulletTooltip, Smithchart, SmithchartMajorGridLines, SmithchartMinorGridLines, SmithchartAxisLine, SmithchartAxis, LegendTitle, LegendLocation, LegendItemStyleBorder, LegendItemStyle, LegendBorder, SmithchartLegendSettings, SeriesTooltipBorder, SeriesTooltip, SeriesMarkerBorder, SeriesMarkerDataLabelBorder, SeriesMarkerDataLabelConnectorLine, SeriesMarkerDataLabel, SeriesMarker, SmithchartSeries, TooltipRender, Subtitle, Title, SmithchartFont, SmithchartMargin, SmithchartBorder, SmithchartRect, LabelCollection, LegendSeries, LabelRegion, HorizontalLabelCollection, RadialLabelCollections, LineSegment, PointRegion, Point, ClosestPoint, MarkerOptions, SmithchartLabelPosition, Direction, DataLabelTextOptions, LabelOption, SmithchartSize, GridArcPoints, smithchartBeforePrint, SmithchartLegend, Sparkline, SparklineTooltip, SparklineBorder, SparklineFont, TrackLineSettings, SparklineTooltipSettings, ContainerArea, LineSettings, RangeBandSettings, AxisSettings, Padding, SparklineMarkerSettings, LabelOffset, SparklineDataLabelSettings } from '@syncfusion/ej2-charts';\n"]}
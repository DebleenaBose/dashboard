import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { StockChart } from '@syncfusion/ej2-charts';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Stock Chart Component
 * ```html
 * <ejs-stockchart></ejs-stockchart>
 * ```
 */
export declare class StockChartComponent extends StockChart implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    childSeries: any;
    childAxes: any;
    childRows: any;
    childAnnotations: any;
    childSelectedDataIndexes: any;
    childPeriods: any;
    childStockEvents: any;
    childIndicators: any;
    tags: string[];
    dataSourceChange: any;
    tooltip_template: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StockChartComponent, "ejs-stockchart", never, {
    "annotations": "annotations";
    "axes": "axes";
    "background": "background";
    "border": "border";
    "chartArea": "chartArea";
    "crosshair": "crosshair";
    "dataSource": "dataSource";
    "enableCustomRange": "enableCustomRange";
    "enablePeriodSelector": "enablePeriodSelector";
    "enablePersistence": "enablePersistence";
    "enableRtl": "enableRtl";
    "enableSelector": "enableSelector";
    "exportType": "exportType";
    "height": "height";
    "indicatorType": "indicatorType";
    "indicators": "indicators";
    "isMultiSelect": "isMultiSelect";
    "isSelect": "isSelect";
    "isTransposed": "isTransposed";
    "locale": "locale";
    "margin": "margin";
    "periods": "periods";
    "primaryXAxis": "primaryXAxis";
    "primaryYAxis": "primaryYAxis";
    "rows": "rows";
    "selectedDataIndexes": "selectedDataIndexes";
    "selectionMode": "selectionMode";
    "series": "series";
    "seriesType": "seriesType";
    "stockEvents": "stockEvents";
    "theme": "theme";
    "title": "title";
    "titleStyle": "titleStyle";
    "tooltip": "tooltip";
    "trendlineType": "trendlineType";
    "width": "width";
    "zoomSettings": "zoomSettings";
}, {
    "axisLabelRender": "axisLabelRender";
    "load": "load";
    "loaded": "loaded";
    "onZooming": "onZooming";
    "pointClick": "pointClick";
    "pointMove": "pointMove";
    "rangeChange": "rangeChange";
    "selectorRender": "selectorRender";
    "seriesRender": "seriesRender";
    "stockChartMouseClick": "stockChartMouseClick";
    "stockChartMouseDown": "stockChartMouseDown";
    "stockChartMouseLeave": "stockChartMouseLeave";
    "stockChartMouseMove": "stockChartMouseMove";
    "stockChartMouseUp": "stockChartMouseUp";
    "stockEventRender": "stockEventRender";
    "tooltipRender": "tooltipRender";
    "dataSourceChange": "dataSourceChange";
}, ["tooltip_template", "childSeries", "childAxes", "childRows", "childAnnotations", "childSelectedDataIndexes", "childPeriods", "childStockEvents", "childIndicators"]>;
}

//# sourceMappingURL=stockchart.component.d.ts.map